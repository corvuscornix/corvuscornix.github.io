!function(n){var t={};function r(e){if(t[e])return t[e].exports;var u=t[e]={i:e,l:!1,exports:{}};return n[e].call(u.exports,u,u.exports,r),u.l=!0,u.exports}r.m=n,r.c=t,r.d=function(n,t,e){r.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,t){if(1&t&&(n=r(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var u in n)r.d(e,u,function(t){return n[t]}.bind(null,u));return e},r.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(t,"a",t),t},r.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},r.p="",r(r.s=1)}([function(n,t,r){(function(n,r){var e;!function(){var u="object"==typeof self&&self.self===self&&self||"object"==typeof n&&n.global===n&&n||this||{},i=u._,o=Array.prototype,a=Object.prototype,c="undefined"!=typeof Symbol?Symbol.prototype:null,l=o.push,f=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,y=Object.create,d=function(){},g=function(n){return n instanceof g?n:this instanceof g?void(this._wrapped=n):new g(n)};t.nodeType?u._=g:(!r.nodeType&&r.exports&&(t=r.exports=g),t._=g),g.VERSION="1.9.1";var m,b=function(n,t,r){if(void 0===t)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},j=function(n,t,r){return g.iteratee!==m?g.iteratee(n,t):null==n?g.identity:g.isFunction(n)?b(n,t,r):g.isObject(n)&&!g.isArray(n)?g.matcher(n):g.property(n)};g.iteratee=m=function(n,t){return j(n,t,1/0)};var x=function(n,t){return t=null==t?n.length-1:+t,function(){for(var r=Math.max(arguments.length-t,0),e=Array(r),u=0;u<r;u++)e[u]=arguments[u+t];switch(t){case 0:return n.call(this,e);case 1:return n.call(this,arguments[0],e);case 2:return n.call(this,arguments[0],arguments[1],e)}var i=Array(t+1);for(u=0;u<t;u++)i[u]=arguments[u];return i[t]=e,n.apply(this,i)}},w=function(n){if(!g.isObject(n))return{};if(y)return y(n);d.prototype=n;var t=new d;return d.prototype=null,t},_=function(n){return function(t){return null==t?void 0:t[n]}},O=function(n,t){return null!=n&&p.call(n,t)},k=function(n,t){for(var r=t.length,e=0;e<r;e++){if(null==n)return;n=n[t[e]]}return r?n:void 0},A=Math.pow(2,53)-1,S=_("length"),M=function(n){var t=S(n);return"number"==typeof t&&t>=0&&t<=A};g.each=g.forEach=function(n,t,r){var e,u;if(t=b(t,r),M(n))for(e=0,u=n.length;e<u;e++)t(n[e],e,n);else{var i=g.keys(n);for(e=0,u=i.length;e<u;e++)t(n[i[e]],i[e],n)}return n},g.map=g.collect=function(n,t,r){t=j(t,r);for(var e=!M(n)&&g.keys(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i};var E=function(n){var t=function(t,r,e,u){var i=!M(t)&&g.keys(t),o=(i||t).length,a=n>0?0:o-1;for(u||(e=t[i?i[a]:a],a+=n);a>=0&&a<o;a+=n){var c=i?i[a]:a;e=r(e,t[c],c,t)}return e};return function(n,r,e,u){var i=arguments.length>=3;return t(n,b(r,u,4),e,i)}};g.reduce=g.foldl=g.inject=E(1),g.reduceRight=g.foldr=E(-1),g.find=g.detect=function(n,t,r){var e=(M(n)?g.findIndex:g.findKey)(n,t,r);if(void 0!==e&&-1!==e)return n[e]},g.filter=g.select=function(n,t,r){var e=[];return t=j(t,r),g.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},g.reject=function(n,t,r){return g.filter(n,g.negate(j(t)),r)},g.every=g.all=function(n,t,r){t=j(t,r);for(var e=!M(n)&&g.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},g.some=g.any=function(n,t,r){t=j(t,r);for(var e=!M(n)&&g.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},g.contains=g.includes=g.include=function(n,t,r,e){return M(n)||(n=g.values(n)),("number"!=typeof r||e)&&(r=0),g.indexOf(n,t,r)>=0},g.invoke=x(function(n,t,r){var e,u;return g.isFunction(t)?u=t:g.isArray(t)&&(e=t.slice(0,-1),t=t[t.length-1]),g.map(n,function(n){var i=u;if(!i){if(e&&e.length&&(n=k(n,e)),null==n)return;i=n[t]}return null==i?i:i.apply(n,r)})}),g.pluck=function(n,t){return g.map(n,g.property(t))},g.where=function(n,t){return g.filter(n,g.matcher(t))},g.findWhere=function(n,t){return g.find(n,g.matcher(t))},g.max=function(n,t,r){var e,u,i=-1/0,o=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=M(n)?n:g.values(n)).length;a<c;a++)null!=(e=n[a])&&e>i&&(i=e);else t=j(t,r),g.each(n,function(n,r,e){((u=t(n,r,e))>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},g.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t||"number"==typeof t&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=M(n)?n:g.values(n)).length;a<c;a++)null!=(e=n[a])&&e<i&&(i=e);else t=j(t,r),g.each(n,function(n,r,e){((u=t(n,r,e))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},g.shuffle=function(n){return g.sample(n,1/0)},g.sample=function(n,t,r){if(null==t||r)return M(n)||(n=g.values(n)),n[g.random(n.length-1)];var e=M(n)?g.clone(n):g.values(n),u=S(e);t=Math.max(Math.min(t,u),0);for(var i=u-1,o=0;o<t;o++){var a=g.random(o,i),c=e[o];e[o]=e[a],e[a]=c}return e.slice(0,t)},g.sortBy=function(n,t,r){var e=0;return t=j(t,r),g.pluck(g.map(n,function(n,r,u){return{value:n,index:e++,criteria:t(n,r,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(r<e||void 0===e)return-1}return n.index-t.index}),"value")};var F=function(n,t){return function(r,e,u){var i=t?[[],[]]:{};return e=j(e,u),g.each(r,function(t,u){var o=e(t,u,r);n(i,t,o)}),i}};g.groupBy=F(function(n,t,r){O(n,r)?n[r].push(t):n[r]=[t]}),g.indexBy=F(function(n,t,r){n[r]=t}),g.countBy=F(function(n,t,r){O(n,r)?n[r]++:n[r]=1});var I=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;g.toArray=function(n){return n?g.isArray(n)?f.call(n):g.isString(n)?n.match(I):M(n)?g.map(n,g.identity):g.values(n):[]},g.size=function(n){return null==n?0:M(n)?n.length:g.keys(n).length},g.partition=F(function(n,t,r){n[r?0:1].push(t)},!0),g.first=g.head=g.take=function(n,t,r){return null==n||n.length<1?null==t?void 0:[]:null==t||r?n[0]:g.initial(n,n.length-t)},g.initial=function(n,t,r){return f.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},g.last=function(n,t,r){return null==n||n.length<1?null==t?void 0:[]:null==t||r?n[n.length-1]:g.rest(n,Math.max(0,n.length-t))},g.rest=g.tail=g.drop=function(n,t,r){return f.call(n,null==t||r?1:t)},g.compact=function(n){return g.filter(n,Boolean)};var N=function(n,t,r,e){for(var u=(e=e||[]).length,i=0,o=S(n);i<o;i++){var a=n[i];if(M(a)&&(g.isArray(a)||g.isArguments(a)))if(t)for(var c=0,l=a.length;c<l;)e[u++]=a[c++];else N(a,t,r,e),u=e.length;else r||(e[u++]=a)}return e};g.flatten=function(n,t){return N(n,t,!1)},g.without=x(function(n,t){return g.difference(n,t)}),g.uniq=g.unique=function(n,t,r,e){g.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=j(r,e));for(var u=[],i=[],o=0,a=S(n);o<a;o++){var c=n[o],l=r?r(c,o,n):c;t&&!r?(o&&i===l||u.push(c),i=l):r?g.contains(i,l)||(i.push(l),u.push(c)):g.contains(u,c)||u.push(c)}return u},g.union=x(function(n){return g.uniq(N(n,!0,!0))}),g.intersection=function(n){for(var t=[],r=arguments.length,e=0,u=S(n);e<u;e++){var i=n[e];if(!g.contains(t,i)){var o;for(o=1;o<r&&g.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},g.difference=x(function(n,t){return t=N(t,!0,!0),g.filter(n,function(n){return!g.contains(t,n)})}),g.unzip=function(n){for(var t=n&&g.max(n,S).length||0,r=Array(t),e=0;e<t;e++)r[e]=g.pluck(n,e);return r},g.zip=x(g.unzip),g.object=function(n,t){for(var r={},e=0,u=S(n);e<u;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r};var T=function(n){return function(t,r,e){r=j(r,e);for(var u=S(t),i=n>0?0:u-1;i>=0&&i<u;i+=n)if(r(t[i],i,t))return i;return-1}};g.findIndex=T(1),g.findLastIndex=T(-1),g.sortedIndex=function(n,t,r,e){for(var u=(r=j(r,e,1))(t),i=0,o=S(n);i<o;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i};var B=function(n,t,r){return function(e,u,i){var o=0,a=S(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(r&&i&&a)return e[i=r(e,u)]===u?i:-1;if(u!=u)return(i=t(f.call(e,o,a),g.isNaN))>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&i<a;i+=n)if(e[i]===u)return i;return-1}};g.indexOf=B(1,g.findIndex,g.sortedIndex),g.lastIndexOf=B(-1,g.findLastIndex),g.range=function(n,t,r){null==t&&(t=n||0,n=0),r||(r=t<n?-1:1);for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;i<e;i++,n+=r)u[i]=n;return u},g.chunk=function(n,t){if(null==t||t<1)return[];for(var r=[],e=0,u=n.length;e<u;)r.push(f.call(n,e,e+=t));return r};var P=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=w(n.prototype),o=n.apply(i,u);return g.isObject(o)?o:i};g.bind=x(function(n,t,r){if(!g.isFunction(n))throw new TypeError("Bind must be called on a function");var e=x(function(u){return P(n,e,t,this,r.concat(u))});return e}),g.partial=x(function(n,t){var r=g.partial.placeholder,e=function(){for(var u=0,i=t.length,o=Array(i),a=0;a<i;a++)o[a]=t[a]===r?arguments[u++]:t[a];for(;u<arguments.length;)o.push(arguments[u++]);return P(n,e,this,this,o)};return e}),g.partial.placeholder=g,g.bindAll=x(function(n,t){var r=(t=N(t,!1,!1)).length;if(r<1)throw new Error("bindAll must be passed function names");for(;r--;){var e=t[r];n[e]=g.bind(n[e],n)}}),g.memoize=function(n,t){var r=function(e){var u=r.cache,i=""+(t?t.apply(this,arguments):e);return O(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},g.delay=x(function(n,t,r){return setTimeout(function(){return n.apply(null,r)},t)}),g.defer=g.partial(g.delay,g,1),g.throttle=function(n,t,r){var e,u,i,o,a=0;r||(r={});var c=function(){a=!1===r.leading?0:g.now(),e=null,o=n.apply(u,i),e||(u=i=null)},l=function(){var l=g.now();a||!1!==r.leading||(a=l);var f=t-(l-a);return u=this,i=arguments,f<=0||f>t?(e&&(clearTimeout(e),e=null),a=l,o=n.apply(u,i),e||(u=i=null)):e||!1===r.trailing||(e=setTimeout(c,f)),o};return l.cancel=function(){clearTimeout(e),a=0,e=u=i=null},l},g.debounce=function(n,t,r){var e,u,i=function(t,r){e=null,r&&(u=n.apply(t,r))},o=x(function(o){if(e&&clearTimeout(e),r){var a=!e;e=setTimeout(i,t),a&&(u=n.apply(this,o))}else e=g.delay(i,t,this,o);return u});return o.cancel=function(){clearTimeout(e),e=null},o},g.wrap=function(n,t){return g.partial(t,n)},g.negate=function(n){return function(){return!n.apply(this,arguments)}},g.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},g.after=function(n,t){return function(){if(--n<1)return t.apply(this,arguments)}},g.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),n<=1&&(t=null),r}},g.once=g.partial(g.before,2),g.restArguments=x;var q=!{toString:null}.propertyIsEnumerable("toString"),L=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],C=function(n,t){var r=L.length,e=n.constructor,u=g.isFunction(e)&&e.prototype||a,i="constructor";for(O(n,i)&&!g.contains(t,i)&&t.push(i);r--;)(i=L[r])in n&&n[i]!==u[i]&&!g.contains(t,i)&&t.push(i)};g.keys=function(n){if(!g.isObject(n))return[];if(v)return v(n);var t=[];for(var r in n)O(n,r)&&t.push(r);return q&&C(n,t),t},g.allKeys=function(n){if(!g.isObject(n))return[];var t=[];for(var r in n)t.push(r);return q&&C(n,t),t},g.values=function(n){for(var t=g.keys(n),r=t.length,e=Array(r),u=0;u<r;u++)e[u]=n[t[u]];return e},g.mapObject=function(n,t,r){t=j(t,r);for(var e=g.keys(n),u=e.length,i={},o=0;o<u;o++){var a=e[o];i[a]=t(n[a],a,n)}return i},g.pairs=function(n){for(var t=g.keys(n),r=t.length,e=Array(r),u=0;u<r;u++)e[u]=[t[u],n[t[u]]];return e},g.invert=function(n){for(var t={},r=g.keys(n),e=0,u=r.length;e<u;e++)t[n[r[e]]]=r[e];return t},g.functions=g.methods=function(n){var t=[];for(var r in n)g.isFunction(n[r])&&t.push(r);return t.sort()};var R=function(n,t){return function(r){var e=arguments.length;if(t&&(r=Object(r)),e<2||null==r)return r;for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;c<a;c++){var l=o[c];t&&void 0!==r[l]||(r[l]=i[l])}return r}};g.extend=R(g.allKeys),g.extendOwn=g.assign=R(g.keys),g.findKey=function(n,t,r){t=j(t,r);for(var e,u=g.keys(n),i=0,o=u.length;i<o;i++)if(t(n[e=u[i]],e,n))return e};var z,K,D=function(n,t,r){return t in r};g.pick=x(function(n,t){var r={},e=t[0];if(null==n)return r;g.isFunction(e)?(t.length>1&&(e=b(e,t[1])),t=g.allKeys(n)):(e=D,t=N(t,!1,!1),n=Object(n));for(var u=0,i=t.length;u<i;u++){var o=t[u],a=n[o];e(a,o,n)&&(r[o]=a)}return r}),g.omit=x(function(n,t){var r,e=t[0];return g.isFunction(e)?(e=g.negate(e),t.length>1&&(r=t[1])):(t=g.map(N(t,!1,!1),String),e=function(n,r){return!g.contains(t,r)}),g.pick(n,e,r)}),g.defaults=R(g.allKeys,!0),g.create=function(n,t){var r=w(n);return t&&g.extendOwn(r,t),r},g.clone=function(n){return g.isObject(n)?g.isArray(n)?n.slice():g.extend({},n):n},g.tap=function(n,t){return t(n),n},g.isMatch=function(n,t){var r=g.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0},z=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return!1;if(n!=n)return t!=t;var u=typeof n;return("function"===u||"object"===u||"object"==typeof t)&&K(n,t,r,e)},K=function(n,t,r,e){n instanceof g&&(n=n._wrapped),t instanceof g&&(t=t._wrapped);var u=s.call(n);if(u!==s.call(t))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!=+n?+t!=+t:0==+n?1/+n==1/t:+n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object Symbol]":return c.valueOf.call(n)===c.valueOf.call(t)}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(g.isFunction(o)&&o instanceof o&&g.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in t)return!1}e=e||[];for(var l=(r=r||[]).length;l--;)if(r[l]===n)return e[l]===t;if(r.push(n),e.push(t),i){if((l=n.length)!==t.length)return!1;for(;l--;)if(!z(n[l],t[l],r,e))return!1}else{var f,p=g.keys(n);if(l=p.length,g.keys(t).length!==l)return!1;for(;l--;)if(f=p[l],!O(t,f)||!z(n[f],t[f],r,e))return!1}return r.pop(),e.pop(),!0},g.isEqual=function(n,t){return z(n,t)},g.isEmpty=function(n){return null==n||(M(n)&&(g.isArray(n)||g.isString(n)||g.isArguments(n))?0===n.length:0===g.keys(n).length)},g.isElement=function(n){return!(!n||1!==n.nodeType)},g.isArray=h||function(n){return"[object Array]"===s.call(n)},g.isObject=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},g.each(["Arguments","Function","String","Number","Date","RegExp","Error","Symbol","Map","WeakMap","Set","WeakSet"],function(n){g["is"+n]=function(t){return s.call(t)==="[object "+n+"]"}}),g.isArguments(arguments)||(g.isArguments=function(n){return O(n,"callee")});var H=u.document&&u.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof H&&(g.isFunction=function(n){return"function"==typeof n||!1}),g.isFinite=function(n){return!g.isSymbol(n)&&isFinite(n)&&!isNaN(parseFloat(n))},g.isNaN=function(n){return g.isNumber(n)&&isNaN(n)},g.isBoolean=function(n){return!0===n||!1===n||"[object Boolean]"===s.call(n)},g.isNull=function(n){return null===n},g.isUndefined=function(n){return void 0===n},g.has=function(n,t){if(!g.isArray(t))return O(n,t);for(var r=t.length,e=0;e<r;e++){var u=t[e];if(null==n||!p.call(n,u))return!1;n=n[u]}return!!r},g.noConflict=function(){return u._=i,this},g.identity=function(n){return n},g.constant=function(n){return function(){return n}},g.noop=function(){},g.property=function(n){return g.isArray(n)?function(t){return k(t,n)}:_(n)},g.propertyOf=function(n){return null==n?function(){}:function(t){return g.isArray(t)?k(n,t):n[t]}},g.matcher=g.matches=function(n){return n=g.extendOwn({},n),function(t){return g.isMatch(t,n)}},g.times=function(n,t,r){var e=Array(Math.max(0,n));t=b(t,r,1);for(var u=0;u<n;u++)e[u]=t(u);return e},g.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},g.now=Date.now||function(){return(new Date).getTime()};var W={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},Z=g.invert(W),$=function(n){var t=function(t){return n[t]},r="(?:"+g.keys(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};g.escape=$(W),g.unescape=$(Z),g.result=function(n,t,r){g.isArray(t)||(t=[t]);var e=t.length;if(!e)return g.isFunction(r)?r.call(n):r;for(var u=0;u<e;u++){var i=null==n?void 0:n[t[u]];void 0===i&&(i=r,u=e),n=g.isFunction(i)?i.call(n):i}return n};var G=0;g.uniqueId=function(n){var t=++G+"";return n?n+t:t},g.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var U=/(.)^/,J={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},V=/\\|'|\r|\n|\u2028|\u2029/g,Y=function(n){return"\\"+J[n]};g.template=function(n,t,r){!t&&r&&(t=r),t=g.defaults({},t,g.templateSettings);var e,u=RegExp([(t.escape||U).source,(t.interpolate||U).source,(t.evaluate||U).source].join("|")+"|$","g"),i=0,o="__p+='";n.replace(u,function(t,r,e,u,a){return o+=n.slice(i,a).replace(V,Y),i=a+t.length,r?o+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?o+="'+\n((__t=("+e+"))==null?'':__t)+\n'":u&&(o+="';\n"+u+"\n__p+='"),t}),o+="';\n",t.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{e=new Function(t.variable||"obj","_",o)}catch(n){throw n.source=o,n}var a=function(n){return e.call(this,n,g)},c=t.variable||"obj";return a.source="function("+c+"){\n"+o+"}",a},g.chain=function(n){var t=g(n);return t._chain=!0,t};var Q=function(n,t){return n._chain?g(t).chain():t};g.mixin=function(n){return g.each(g.functions(n),function(t){var r=g[t]=n[t];g.prototype[t]=function(){var n=[this._wrapped];return l.apply(n,arguments),Q(this,r.apply(g,n))}}),g},g.mixin(g),g.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=o[n];g.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0],Q(this,r)}}),g.each(["concat","join","slice"],function(n){var t=o[n];g.prototype[n]=function(){return Q(this,t.apply(this._wrapped,arguments))}}),g.prototype.value=function(){return this._wrapped},g.prototype.valueOf=g.prototype.toJSON=g.prototype.value,g.prototype.toString=function(){return String(this._wrapped)},void 0===(e=function(){return g}.apply(t,[]))||(r.exports=e)}()}).call(this,r(2),r(3)(n))},function(n,t,r){"use strict";r.r(t);var e=r(0);const u=Object(e.template)('<article><div class="article-info"><h3><a target="_blank" href="<%= url %>"><%= title %></a></h3><p><%= description %></p></div><div class="article-rating" style="color: <%= color %>"><%= rating %></div></article>'),i=Object(e.template)('<span>Based on scores from <b><%= count %></b> sites the product\'s total score is</span><span class="total-score-value" style="color: <%= color %>"><%= score %></span>');function o(){const n=document.getElementById("searchkey").value;if(n&&n.length>5){document.getElementById("error").textContent="";const t=document.getElementById("results-list"),r=document.getElementById("total-score");t.innerHTML="",r.innerHTML="Searching...",Promise.all([c(n,1),c(n,2),c(n,3),c(n,4),c(n,5)]).then(n=>Promise.all(n.map(n=>n.json()))).then(n=>n.map(n=>n.items||n.error).flat()).then(function(n){let e=0,o=0;if(n.forEach(n=>{if(!n)return;if(n.errors&&"dailyLimitExceeded"===n.errors[0].reason)return void(document.getElementById("error").textContent="Maximum number of queries for the day has been reached. Try again tomorrow.");let r;if(n.pagemap.aggregaterating&&n.pagemap.aggregaterating.length&&void 0!==n.pagemap.aggregaterating[0].bestrating){if(r=l(parseFloat(n.pagemap.aggregaterating[0].ratingvalue),parseFloat(n.pagemap.aggregaterating[0].bestrating)),isNaN(r))return;e++,o+=r}else{if(!n.pagemap.rating)return;{const t=n.pagemap.rating.map(n=>{const t=l(parseFloat(n.ratingvalue),parseFloat(n.bestrating));if(!isNaN(t))return t});if(r=t.reduce((n,t)=>n+t,0)/t.length,isNaN(r))return;e++,o+=r}}t.innerHTML+=u({title:n.title,url:n.link,description:n.snippet,rating:(5*r).toFixed(1),color:a(5*r)})}),e>0){const n=5*o/e;r.innerHTML=i({score:n.toFixed(1),count:e,color:a(n)})}})}else document.getElementById("error").textContent="Search term minimum length is 5"}function a(n){return n<2?"brown":n<3?"red":n<4?"#f1f100":n<4.5?"limegreen":"seagreen"}function c(n,t=1){return n?fetch(`https://www.googleapis.com/customsearch/v1?cx=005042070686331231502:7crlel-6ae8&key=AIzaSyCLu_FyerPoUZZpci5q0Z-cw3IYmD0rGCw&q=${n}&num=10&start=${10*t}`,{method:"GET",headers:{"Content-Type":"application/json"}}):null}function l(n,t){return n/t}document.getElementById("submit").onclick=o,document.getElementById("searchkey").onkeypress=n=>{13===n.keyCode&&o()}},function(n,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(n){"object"==typeof window&&(r=window)}n.exports=r},function(n,t){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,