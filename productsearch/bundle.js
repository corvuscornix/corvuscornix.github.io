!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=3)}([function(t,n,r){(function(t,r){var e;!function(){var o="object"==typeof self&&self.self===self&&self||"object"==typeof t&&t.global===t&&t||this||{},i=o._,u=Array.prototype,c=Object.prototype,a="undefined"!=typeof Symbol?Symbol.prototype:null,s=u.push,f=u.slice,l=c.toString,p=c.hasOwnProperty,h=Array.isArray,d=Object.keys,y=Object.create,v=function(){},b=function(t){return t instanceof b?t:this instanceof b?void(this._wrapped=t):new b(t)};n.nodeType?o._=b:(!r.nodeType&&r.exports&&(n=r.exports=b),n._=b),b.VERSION="1.9.1";var g,m=function(t,n,r){if(void 0===n)return t;switch(null==r?3:r){case 1:return function(r){return t.call(n,r)};case 3:return function(r,e,o){return t.call(n,r,e,o)};case 4:return function(r,e,o,i){return t.call(n,r,e,o,i)}}return function(){return t.apply(n,arguments)}},_=function(t,n,r){return b.iteratee!==g?b.iteratee(t,n):null==t?b.identity:b.isFunction(t)?m(t,n,r):b.isObject(t)&&!b.isArray(t)?b.matcher(t):b.property(t)};b.iteratee=g=function(t,n){return _(t,n,1/0)};var w=function(t,n){return n=null==n?t.length-1:+n,function(){for(var r=Math.max(arguments.length-n,0),e=Array(r),o=0;o<r;o++)e[o]=arguments[o+n];switch(n){case 0:return t.call(this,e);case 1:return t.call(this,arguments[0],e);case 2:return t.call(this,arguments[0],arguments[1],e)}var i=Array(n+1);for(o=0;o<n;o++)i[o]=arguments[o];return i[n]=e,t.apply(this,i)}},x=function(t){if(!b.isObject(t))return{};if(y)return y(t);v.prototype=t;var n=new v;return v.prototype=null,n},S=function(t){return function(n){return null==n?void 0:n[t]}},E=function(t,n){return null!=t&&p.call(t,n)},j=function(t,n){for(var r=n.length,e=0;e<r;e++){if(null==t)return;t=t[n[e]]}return r?t:void 0},O=Math.pow(2,53)-1,T=S("length"),k=function(t){var n=T(t);return"number"==typeof n&&n>=0&&n<=O};b.each=b.forEach=function(t,n,r){var e,o;if(n=m(n,r),k(t))for(e=0,o=t.length;e<o;e++)n(t[e],e,t);else{var i=b.keys(t);for(e=0,o=i.length;e<o;e++)n(t[i[e]],i[e],t)}return t},b.map=b.collect=function(t,n,r){n=_(n,r);for(var e=!k(t)&&b.keys(t),o=(e||t).length,i=Array(o),u=0;u<o;u++){var c=e?e[u]:u;i[u]=n(t[c],c,t)}return i};var A=function(t){var n=function(n,r,e,o){var i=!k(n)&&b.keys(n),u=(i||n).length,c=t>0?0:u-1;for(o||(e=n[i?i[c]:c],c+=t);c>=0&&c<u;c+=t){var a=i?i[c]:c;e=r(e,n[a],a,n)}return e};return function(t,r,e,o){var i=arguments.length>=3;return n(t,m(r,o,4),e,i)}};b.reduce=b.foldl=b.inject=A(1),b.reduceRight=b.foldr=A(-1),b.find=b.detect=function(t,n,r){var e=(k(t)?b.findIndex:b.findKey)(t,n,r);if(void 0!==e&&-1!==e)return t[e]},b.filter=b.select=function(t,n,r){var e=[];return n=_(n,r),b.each(t,function(t,r,o){n(t,r,o)&&e.push(t)}),e},b.reject=function(t,n,r){return b.filter(t,b.negate(_(n)),r)},b.every=b.all=function(t,n,r){n=_(n,r);for(var e=!k(t)&&b.keys(t),o=(e||t).length,i=0;i<o;i++){var u=e?e[i]:i;if(!n(t[u],u,t))return!1}return!0},b.some=b.any=function(t,n,r){n=_(n,r);for(var e=!k(t)&&b.keys(t),o=(e||t).length,i=0;i<o;i++){var u=e?e[i]:i;if(n(t[u],u,t))return!0}return!1},b.contains=b.includes=b.include=function(t,n,r,e){return k(t)||(t=b.values(t)),("number"!=typeof r||e)&&(r=0),b.indexOf(t,n,r)>=0},b.invoke=w(function(t,n,r){var e,o;return b.isFunction(n)?o=n:b.isArray(n)&&(e=n.slice(0,-1),n=n[n.length-1]),b.map(t,function(t){var i=o;if(!i){if(e&&e.length&&(t=j(t,e)),null==t)return;i=t[n]}return null==i?i:i.apply(t,r)})}),b.pluck=function(t,n){return b.map(t,b.property(n))},b.where=function(t,n){return b.filter(t,b.matcher(n))},b.findWhere=function(t,n){return b.find(t,b.matcher(n))},b.max=function(t,n,r){var e,o,i=-1/0,u=-1/0;if(null==n||"number"==typeof n&&"object"!=typeof t[0]&&null!=t)for(var c=0,a=(t=k(t)?t:b.values(t)).length;c<a;c++)null!=(e=t[c])&&e>i&&(i=e);else n=_(n,r),b.each(t,function(t,r,e){((o=n(t,r,e))>u||o===-1/0&&i===-1/0)&&(i=t,u=o)});return i},b.min=function(t,n,r){var e,o,i=1/0,u=1/0;if(null==n||"number"==typeof n&&"object"!=typeof t[0]&&null!=t)for(var c=0,a=(t=k(t)?t:b.values(t)).length;c<a;c++)null!=(e=t[c])&&e<i&&(i=e);else n=_(n,r),b.each(t,function(t,r,e){((o=n(t,r,e))<u||o===1/0&&i===1/0)&&(i=t,u=o)});return i},b.shuffle=function(t){return b.sample(t,1/0)},b.sample=function(t,n,r){if(null==n||r)return k(t)||(t=b.values(t)),t[b.random(t.length-1)];var e=k(t)?b.clone(t):b.values(t),o=T(e);n=Math.max(Math.min(n,o),0);for(var i=o-1,u=0;u<n;u++){var c=b.random(u,i),a=e[u];e[u]=e[c],e[c]=a}return e.slice(0,n)},b.sortBy=function(t,n,r){var e=0;return n=_(n,r),b.pluck(b.map(t,function(t,r,o){return{value:t,index:e++,criteria:n(t,r,o)}}).sort(function(t,n){var r=t.criteria,e=n.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(r<e||void 0===e)return-1}return t.index-n.index}),"value")};var I=function(t,n){return function(r,e,o){var i=n?[[],[]]:{};return e=_(e,o),b.each(r,function(n,o){var u=e(n,o,r);t(i,n,u)}),i}};b.groupBy=I(function(t,n,r){E(t,r)?t[r].push(n):t[r]=[n]}),b.indexBy=I(function(t,n,r){t[r]=n}),b.countBy=I(function(t,n,r){E(t,r)?t[r]++:t[r]=1});var P=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;b.toArray=function(t){return t?b.isArray(t)?f.call(t):b.isString(t)?t.match(P):k(t)?b.map(t,b.identity):b.values(t):[]},b.size=function(t){return null==t?0:k(t)?t.length:b.keys(t).length},b.partition=I(function(t,n,r){t[r?0:1].push(n)},!0),b.first=b.head=b.take=function(t,n,r){return null==t||t.length<1?null==n?void 0:[]:null==n||r?t[0]:b.initial(t,t.length-n)},b.initial=function(t,n,r){return f.call(t,0,Math.max(0,t.length-(null==n||r?1:n)))},b.last=function(t,n,r){return null==t||t.length<1?null==n?void 0:[]:null==n||r?t[t.length-1]:b.rest(t,Math.max(0,t.length-n))},b.rest=b.tail=b.drop=function(t,n,r){return f.call(t,null==n||r?1:n)},b.compact=function(t){return b.filter(t,Boolean)};var N=function(t,n,r,e){for(var o=(e=e||[]).length,i=0,u=T(t);i<u;i++){var c=t[i];if(k(c)&&(b.isArray(c)||b.isArguments(c)))if(n)for(var a=0,s=c.length;a<s;)e[o++]=c[a++];else N(c,n,r,e),o=e.length;else r||(e[o++]=c)}return e};b.flatten=function(t,n){return N(t,n,!1)},b.without=w(function(t,n){return b.difference(t,n)}),b.uniq=b.unique=function(t,n,r,e){b.isBoolean(n)||(e=r,r=n,n=!1),null!=r&&(r=_(r,e));for(var o=[],i=[],u=0,c=T(t);u<c;u++){var a=t[u],s=r?r(a,u,t):a;n&&!r?(u&&i===s||o.push(a),i=s):r?b.contains(i,s)||(i.push(s),o.push(a)):b.contains(o,a)||o.push(a)}return o},b.union=w(function(t){return b.uniq(N(t,!0,!0))}),b.intersection=function(t){for(var n=[],r=arguments.length,e=0,o=T(t);e<o;e++){var i=t[e];if(!b.contains(n,i)){var u;for(u=1;u<r&&b.contains(arguments[u],i);u++);u===r&&n.push(i)}}return n},b.difference=w(function(t,n){return n=N(n,!0,!0),b.filter(t,function(t){return!b.contains(n,t)})}),b.unzip=function(t){for(var n=t&&b.max(t,T).length||0,r=Array(n),e=0;e<n;e++)r[e]=b.pluck(t,e);return r},b.zip=w(b.unzip),b.object=function(t,n){for(var r={},e=0,o=T(t);e<o;e++)n?r[t[e]]=n[e]:r[t[e][0]]=t[e][1];return r};var M=function(t){return function(n,r,e){r=_(r,e);for(var o=T(n),i=t>0?0:o-1;i>=0&&i<o;i+=t)if(r(n[i],i,n))return i;return-1}};b.findIndex=M(1),b.findLastIndex=M(-1),b.sortedIndex=function(t,n,r,e){for(var o=(r=_(r,e,1))(n),i=0,u=T(t);i<u;){var c=Math.floor((i+u)/2);r(t[c])<o?i=c+1:u=c}return i};var F=function(t,n,r){return function(e,o,i){var u=0,c=T(e);if("number"==typeof i)t>0?u=i>=0?i:Math.max(i+c,u):c=i>=0?Math.min(i+1,c):i+c+1;else if(r&&i&&c)return e[i=r(e,o)]===o?i:-1;if(o!=o)return(i=n(f.call(e,u,c),b.isNaN))>=0?i+u:-1;for(i=t>0?u:c-1;i>=0&&i<c;i+=t)if(e[i]===o)return i;return-1}};b.indexOf=F(1,b.findIndex,b.sortedIndex),b.lastIndexOf=F(-1,b.findLastIndex),b.range=function(t,n,r){null==n&&(n=t||0,t=0),r||(r=n<t?-1:1);for(var e=Math.max(Math.ceil((n-t)/r),0),o=Array(e),i=0;i<e;i++,t+=r)o[i]=t;return o},b.chunk=function(t,n){if(null==n||n<1)return[];for(var r=[],e=0,o=t.length;e<o;)r.push(f.call(t,e,e+=n));return r};var B=function(t,n,r,e,o){if(!(e instanceof n))return t.apply(r,o);var i=x(t.prototype),u=t.apply(i,o);return b.isObject(u)?u:i};b.bind=w(function(t,n,r){if(!b.isFunction(t))throw new TypeError("Bind must be called on a function");var e=w(function(o){return B(t,e,n,this,r.concat(o))});return e}),b.partial=w(function(t,n){var r=b.partial.placeholder,e=function(){for(var o=0,i=n.length,u=Array(i),c=0;c<i;c++)u[c]=n[c]===r?arguments[o++]:n[c];for(;o<arguments.length;)u.push(arguments[o++]);return B(t,e,this,this,u)};return e}),b.partial.placeholder=b,b.bindAll=w(function(t,n){var r=(n=N(n,!1,!1)).length;if(r<1)throw new Error("bindAll must be passed function names");for(;r--;){var e=n[r];t[e]=b.bind(t[e],t)}}),b.memoize=function(t,n){var r=function(e){var o=r.cache,i=""+(n?n.apply(this,arguments):e);return E(o,i)||(o[i]=t.apply(this,arguments)),o[i]};return r.cache={},r},b.delay=w(function(t,n,r){return setTimeout(function(){return t.apply(null,r)},n)}),b.defer=b.partial(b.delay,b,1),b.throttle=function(t,n,r){var e,o,i,u,c=0;r||(r={});var a=function(){c=!1===r.leading?0:b.now(),e=null,u=t.apply(o,i),e||(o=i=null)},s=function(){var s=b.now();c||!1!==r.leading||(c=s);var f=n-(s-c);return o=this,i=arguments,f<=0||f>n?(e&&(clearTimeout(e),e=null),c=s,u=t.apply(o,i),e||(o=i=null)):e||!1===r.trailing||(e=setTimeout(a,f)),u};return s.cancel=function(){clearTimeout(e),c=0,e=o=i=null},s},b.debounce=function(t,n,r){var e,o,i=function(n,r){e=null,r&&(o=t.apply(n,r))},u=w(function(u){if(e&&clearTimeout(e),r){var c=!e;e=setTimeout(i,n),c&&(o=t.apply(this,u))}else e=b.delay(i,n,this,u);return o});return u.cancel=function(){clearTimeout(e),e=null},u},b.wrap=function(t,n){return b.partial(n,t)},b.negate=function(t){return function(){return!t.apply(this,arguments)}},b.compose=function(){var t=arguments,n=t.length-1;return function(){for(var r=n,e=t[n].apply(this,arguments);r--;)e=t[r].call(this,e);return e}},b.after=function(t,n){return function(){if(--t<1)return n.apply(this,arguments)}},b.before=function(t,n){var r;return function(){return--t>0&&(r=n.apply(this,arguments)),t<=1&&(n=null),r}},b.once=b.partial(b.before,2),b.restArguments=w;var D=!{toString:null}.propertyIsEnumerable("toString"),H=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],C=function(t,n){var r=H.length,e=t.constructor,o=b.isFunction(e)&&e.prototype||c,i="constructor";for(E(t,i)&&!b.contains(n,i)&&n.push(i);r--;)(i=H[r])in t&&t[i]!==o[i]&&!b.contains(n,i)&&n.push(i)};b.keys=function(t){if(!b.isObject(t))return[];if(d)return d(t);var n=[];for(var r in t)E(t,r)&&n.push(r);return D&&C(t,n),n},b.allKeys=function(t){if(!b.isObject(t))return[];var n=[];for(var r in t)n.push(r);return D&&C(t,n),n},b.values=function(t){for(var n=b.keys(t),r=n.length,e=Array(r),o=0;o<r;o++)e[o]=t[n[o]];return e},b.mapObject=function(t,n,r){n=_(n,r);for(var e=b.keys(t),o=e.length,i={},u=0;u<o;u++){var c=e[u];i[c]=n(t[c],c,t)}return i},b.pairs=function(t){for(var n=b.keys(t),r=n.length,e=Array(r),o=0;o<r;o++)e[o]=[n[o],t[n[o]]];return e},b.invert=function(t){for(var n={},r=b.keys(t),e=0,o=r.length;e<o;e++)n[t[r[e]]]=r[e];return n},b.functions=b.methods=function(t){var n=[];for(var r in t)b.isFunction(t[r])&&n.push(r);return n.sort()};var L=function(t,n){return function(r){var e=arguments.length;if(n&&(r=Object(r)),e<2||null==r)return r;for(var o=1;o<e;o++)for(var i=arguments[o],u=t(i),c=u.length,a=0;a<c;a++){var s=u[a];n&&void 0!==r[s]||(r[s]=i[s])}return r}};b.extend=L(b.allKeys),b.extendOwn=b.assign=L(b.keys),b.findKey=function(t,n,r){n=_(n,r);for(var e,o=b.keys(t),i=0,u=o.length;i<u;i++)if(n(t[e=o[i]],e,t))return e};var V,q,R=function(t,n,r){return n in r};b.pick=w(function(t,n){var r={},e=n[0];if(null==t)return r;b.isFunction(e)?(n.length>1&&(e=m(e,n[1])),n=b.allKeys(t)):(e=R,n=N(n,!1,!1),t=Object(t));for(var o=0,i=n.length;o<i;o++){var u=n[o],c=t[u];e(c,u,t)&&(r[u]=c)}return r}),b.omit=w(function(t,n){var r,e=n[0];return b.isFunction(e)?(e=b.negate(e),n.length>1&&(r=n[1])):(n=b.map(N(n,!1,!1),String),e=function(t,r){return!b.contains(n,r)}),b.pick(t,e,r)}),b.defaults=L(b.allKeys,!0),b.create=function(t,n){var r=x(t);return n&&b.extendOwn(r,n),r},b.clone=function(t){return b.isObject(t)?b.isArray(t)?t.slice():b.extend({},t):t},b.tap=function(t,n){return n(t),t},b.isMatch=function(t,n){var r=b.keys(n),e=r.length;if(null==t)return!e;for(var o=Object(t),i=0;i<e;i++){var u=r[i];if(n[u]!==o[u]||!(u in o))return!1}return!0},V=function(t,n,r,e){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return!1;if(t!=t)return n!=n;var o=typeof t;return("function"===o||"object"===o||"object"==typeof n)&&q(t,n,r,e)},q=function(t,n,r,e){t instanceof b&&(t=t._wrapped),n instanceof b&&(n=n._wrapped);var o=l.call(t);if(o!==l.call(n))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+t==""+n;case"[object Number]":return+t!=+t?+n!=+n:0==+t?1/+t==1/n:+t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object Symbol]":return a.valueOf.call(t)===a.valueOf.call(n)}var i="[object Array]"===o;if(!i){if("object"!=typeof t||"object"!=typeof n)return!1;var u=t.constructor,c=n.constructor;if(u!==c&&!(b.isFunction(u)&&u instanceof u&&b.isFunction(c)&&c instanceof c)&&"constructor"in t&&"constructor"in n)return!1}e=e||[];for(var s=(r=r||[]).length;s--;)if(r[s]===t)return e[s]===n;if(r.push(t),e.push(n),i){if((s=t.length)!==n.length)return!1;for(;s--;)if(!V(t[s],n[s],r,e))return!1}else{var f,p=b.keys(t);if(s=p.length,b.keys(n).length!==s)return!1;for(;s--;)if(f=p[s],!E(n,f)||!V(t[f],n[f],r,e))return!1}return r.pop(),e.pop(),!0},b.isEqual=function(t,n){return V(t,n)},b.isEmpty=function(t){return null==t||(k(t)&&(b.isArray(t)||b.isString(t)||b.isArguments(t))?0===t.length:0===b.keys(t).length)},b.isElement=function(t){return!(!t||1!==t.nodeType)},b.isArray=h||function(t){return"[object Array]"===l.call(t)},b.isObject=function(t){var n=typeof t;return"function"===n||"object"===n&&!!t},b.each(["Arguments","Function","String","Number","Date","RegExp","Error","Symbol","Map","WeakMap","Set","WeakSet"],function(t){b["is"+t]=function(n){return l.call(n)==="[object "+t+"]"}}),b.isArguments(arguments)||(b.isArguments=function(t){return E(t,"callee")});var Y=o.document&&o.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof Y&&(b.isFunction=function(t){return"function"==typeof t||!1}),b.isFinite=function(t){return!b.isSymbol(t)&&isFinite(t)&&!isNaN(parseFloat(t))},b.isNaN=function(t){return b.isNumber(t)&&isNaN(t)},b.isBoolean=function(t){return!0===t||!1===t||"[object Boolean]"===l.call(t)},b.isNull=function(t){return null===t},b.isUndefined=function(t){return void 0===t},b.has=function(t,n){if(!b.isArray(n))return E(t,n);for(var r=n.length,e=0;e<r;e++){var o=n[e];if(null==t||!p.call(t,o))return!1;t=t[o]}return!!r},b.noConflict=function(){return o._=i,this},b.identity=function(t){return t},b.constant=function(t){return function(){return t}},b.noop=function(){},b.property=function(t){return b.isArray(t)?function(n){return j(n,t)}:S(t)},b.propertyOf=function(t){return null==t?function(){}:function(n){return b.isArray(n)?j(t,n):t[n]}},b.matcher=b.matches=function(t){return t=b.extendOwn({},t),function(n){return b.isMatch(n,t)}},b.times=function(t,n,r){var e=Array(Math.max(0,t));n=m(n,r,1);for(var o=0;o<t;o++)e[o]=n(o);return e},b.random=function(t,n){return null==n&&(n=t,t=0),t+Math.floor(Math.random()*(n-t+1))},b.now=Date.now||function(){return(new Date).getTime()};var z={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},U=b.invert(z),K=function(t){var n=function(n){return t[n]},r="(?:"+b.keys(t).join("|")+")",e=RegExp(r),o=RegExp(r,"g");return function(t){return t=null==t?"":""+t,e.test(t)?t.replace(o,n):t}};b.escape=K(z),b.unescape=K(U),b.result=function(t,n,r){b.isArray(n)||(n=[n]);var e=n.length;if(!e)return b.isFunction(r)?r.call(t):r;for(var o=0;o<e;o++){var i=null==t?void 0:t[n[o]];void 0===i&&(i=r,o=e),t=b.isFunction(i)?i.call(t):i}return t};var W=0;b.uniqueId=function(t){var n=++W+"";return t?t+n:n},b.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var Z=/(.)^/,$={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},G=/\\|'|\r|\n|\u2028|\u2029/g,J=function(t){return"\\"+$[t]};b.template=function(t,n,r){!n&&r&&(n=r),n=b.defaults({},n,b.templateSettings);var e,o=RegExp([(n.escape||Z).source,(n.interpolate||Z).source,(n.evaluate||Z).source].join("|")+"|$","g"),i=0,u="__p+='";t.replace(o,function(n,r,e,o,c){return u+=t.slice(i,c).replace(G,J),i=c+n.length,r?u+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?u+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(u+="';\n"+o+"\n__p+='"),n}),u+="';\n",n.variable||(u="with(obj||{}){\n"+u+"}\n"),u="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+u+"return __p;\n";try{e=new Function(n.variable||"obj","_",u)}catch(t){throw t.source=u,t}var c=function(t){return e.call(this,t,b)},a=n.variable||"obj";return c.source="function("+a+"){\n"+u+"}",c},b.chain=function(t){var n=b(t);return n._chain=!0,n};var Q=function(t,n){return t._chain?b(n).chain():n};b.mixin=function(t){return b.each(b.functions(t),function(n){var r=b[n]=t[n];b.prototype[n]=function(){var t=[this._wrapped];return s.apply(t,arguments),Q(this,r.apply(b,t))}}),b},b.mixin(b),b.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var n=u[t];b.prototype[t]=function(){var r=this._wrapped;return n.apply(r,arguments),"shift"!==t&&"splice"!==t||0!==r.length||delete r[0],Q(this,r)}}),b.each(["concat","join","slice"],function(t){var n=u[t];b.prototype[t]=function(){return Q(this,n.apply(this._wrapped,arguments))}}),b.prototype.value=function(){return this._wrapped},b.prototype.valueOf=b.prototype.toJSON=b.prototype.value,b.prototype.toString=function(){return String(this._wrapped)},void 0===(e=function(){return b}.apply(n,[]))||(r.exports=e)}()}).call(this,r(1),r(2)(t))},function(t,n){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,r){"use strict";r.r(n);var e=r(0);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var o=function(t,n){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)};function i(t,n){function r(){this.constructor=t}o(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function u(t){return"function"==typeof t}var c=!1,a={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;c=t},get useDeprecatedSynchronousErrorHandling(){return c}};function s(t){setTimeout(function(){throw t},0)}var f={closed:!0,next:function(t){},error:function(t){if(a.useDeprecatedSynchronousErrorHandling)throw t;s(t)},complete:function(){}},l=Array.isArray||function(t){return t&&"number"==typeof t.length};function p(t){return null!==t&&"object"==typeof t}function h(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,n){return n+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}h.prototype=Object.create(Error.prototype);var d=h,y=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var n;if(!this.closed){var r=this._parentOrParents,e=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof t)r.remove(this);else if(null!==r)for(var i=0;i<r.length;++i){r[i].remove(this)}if(u(e))try{e.call(this)}catch(t){n=t instanceof d?v(t.errors):[t]}if(l(o)){i=-1;for(var c=o.length;++i<c;){var a=o[i];if(p(a))try{a.unsubscribe()}catch(t){n=n||[],t instanceof d?n=n.concat(v(t.errors)):n.push(t)}}}if(n)throw new d(n)}},t.prototype.add=function(n){var r=n;if(!n)return t.EMPTY;switch(typeof n){case"function":r=new t(n);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var e=r;(r=new t)._subscriptions=[e]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof t){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var r=n.indexOf(t);-1!==r&&n.splice(r,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function v(t){return t.reduce(function(t,n){return t.concat(n instanceof d?n.errors:n)},[])}var b="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),g=function(t){function n(r,e,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=f;break;case 1:if(!r){i.destination=f;break}if("object"==typeof r){r instanceof n?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new m(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new m(i,r,e,o)}return i}return i(n,t),n.prototype[b]=function(){return this},n.create=function(t,r,e){var o=new n(t,r,e);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(y),m=function(t){function n(n,r,e,o){var i,c=t.call(this)||this;c._parentSubscriber=n;var a=c;return u(r)?i=r:r&&(i=r.next,e=r.error,o=r.complete,r!==f&&(u((a=Object.create(r)).unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=i,c._error=e,c._complete=o,c}return i(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,r=a.useDeprecatedSynchronousErrorHandling;if(this._error)r&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)r?(n.syncErrorValue=t,n.syncErrorThrown=!0):s(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;s(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),a.useDeprecatedSynchronousErrorHandling)throw t;s(t)}},n.prototype.__tryOrSetError=function(t,n,r){if(!a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,r)}catch(n){return a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(s(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(g);var _="function"==typeof Symbol&&Symbol.observable||"@@observable";function w(){}function x(t){return t?1===t.length?t[0]:function(n){return t.reduce(function(t,n){return n(t)},n)}:w}var S=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var r=new t;return r.source=this,r.operator=n,r},t.prototype.subscribe=function(t,n,r){var e=this.operator,o=function(t,n,r){if(t){if(t instanceof g)return t;if(t[b])return t[b]()}return t||n||r?new g(t,n,r):new g(f)}(t,n,r);if(e?o.add(e.call(o,this.source)):o.add(this.source||a.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),a.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,r=n.closed,e=n.destination,o=n.isStopped;if(r||o)return!1;t=e&&e instanceof g?e:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var r=this;return new(n=E(n))(function(n,e){var o;o=r.subscribe(function(n){try{t(n)}catch(t){e(t),o&&o.unsubscribe()}},e,n)})},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[_]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:x(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=E(t))(function(t,r){var e;n.subscribe(function(t){return e=t},function(t){return r(t)},function(){return t(e)})})},t.create=function(n){return new t(n)},t}();function E(t){if(t||(t=a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var j=function(t){return function(n){for(var r=0,e=t.length;r<e&&!n.closed;r++)n.next(t[r]);n.complete()}};function O(t,n){return new S(function(r){var e=new y,o=0;return e.add(n.schedule(function(){o!==t.length?(r.next(t[o++]),r.closed||e.add(this.schedule())):r.complete()})),e})}function T(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r,e=t[t.length-1];return(r=e)&&"function"==typeof r.schedule?(t.pop(),O(t,e)):function(t,n){return n?O(t,n):new S(j(t))}(t)}function k(t,n){return function(r){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new A(t,n))}}var A=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new I(t,this.project,this.thisArg))},t}(),I=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.project=r,o.count=0,o.thisArg=e||o,o}return i(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(g);function P(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var N=P(),M=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function F(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var B=function(t){if(t&&"function"==typeof t[_])return e=t,function(t){var n=e[_]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(M(t))return j(t);if(F(t))return r=t,function(t){return r.then(function(n){t.closed||(t.next(n),t.complete())},function(n){return t.error(n)}).then(null,s),t};if(t&&"function"==typeof t[N])return n=t,function(t){for(var r=n[N]();;){var e=r.next();if(e.done){t.complete();break}if(t.next(e.value),t.closed)break}return"function"==typeof r.return&&t.add(function(){r.return&&r.return()}),t};var n,r,e,o=p(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function D(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[_]}(t))return function(t,n){return new S(function(r){var e=new y;return e.add(n.schedule(function(){var o=t[_]();e.add(o.subscribe({next:function(t){e.add(n.schedule(function(){return r.next(t)}))},error:function(t){e.add(n.schedule(function(){return r.error(t)}))},complete:function(){e.add(n.schedule(function(){return r.complete()}))}}))})),e})}(t,n);if(F(t))return function(t,n){return new S(function(r){var e=new y;return e.add(n.schedule(function(){return t.then(function(t){e.add(n.schedule(function(){r.next(t),e.add(n.schedule(function(){return r.complete()}))}))},function(t){e.add(n.schedule(function(){return r.error(t)}))})})),e})}(t,n);if(M(t))return O(t,n);if(function(t){return t&&"function"==typeof t[N]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new S(function(r){var e,o=new y;return o.add(function(){e&&"function"==typeof e.return&&e.return()}),o.add(n.schedule(function(){e=t[N](),o.add(n.schedule(function(){if(!r.closed){var t,n;try{var o=e.next();t=o.value,n=o.done}catch(t){return void r.error(t)}n?r.complete():(r.next(t),this.schedule())}}))})),o})}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function H(t,n){return n?D(t,n):t instanceof S?t:new S(B(t))}function C(t,n){return new S(function(r){var e=t.length;if(0!==e)for(var o=new Array(e),i=0,u=0,c=function(c){var a=H(t[c]),s=!1;r.add(a.subscribe({next:function(t){s||(s=!0,u++),o[c]=t},error:function(t){return r.error(t)},complete:function(){++i!==e&&s||(u===e&&r.next(n?n.reduce(function(t,n,r){return t[n]=o[r],t},{}):o),r.complete())}}))},a=0;a<e;a++)c(a);else r.complete()})}var L=function(t){function n(n,r,e){var o=t.call(this)||this;return o.parent=n,o.outerValue=r,o.outerIndex=e,o.index=0,o}return i(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(g);var V=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.notifyNext=function(t,n,r,e,o){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(g);var q=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new R(t,this.project,this.concurrent))},t}(),R=function(t){function n(n,r,e){void 0===e&&(e=Number.POSITIVE_INFINITY);var o=t.call(this,n)||this;return o.project=r,o.concurrent=e,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return i(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,r=this.index++;try{n=this.project(t,r)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,r)},n.prototype._innerSub=function(t,n,r){var e=new L(this,void 0,void 0);this.destination.add(e),function(t,n,r,e,o){if(void 0===o&&(o=new L(t,r,e)),!o.closed)n instanceof S?n.subscribe(o):B(n)(o)}(this,t,n,r,e)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,r,e,o){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(V);const Y=10,z=5,U=Object(e.template)('<article><div class="article-info"><h3><a target="_blank" href="<%= url %>"><%= title %></a></h3><div class="description"><%= description %></div><a class="url" target="_blank" href="<%= url %>"><%= url %></a></div><div class="article-rating" style="color: <%= color %>"><%= rating %></div></article>'),K=Object(e.template)('<span>Based on review scores from <b><%= count %></b> sites the product\'s total score is</span><span class="total-score-value" style="color: <%= color %>"><%= score %></span>');function W(){const t=document.getElementById("searchkey").value;if(t&&t.length>5){document.getElementById("error").textContent="";const n=document.getElementById("results-list"),r=document.getElementById("total-score");n.innerHTML="",r.innerHTML="Searching...",$(t,1).subscribe(e=>{const o=e.searchInformation.totalResults,i=[T(e)];let u=1;for(;u*Y<o&&u<z;)i.push($(t,u*Y+1)),u++;(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){var r=t[0];if(l(r))return C(r,null);if(p(r)&&Object.getPrototypeOf(r)===Object.prototype){var e=Object.keys(r);return C(e.map(function(t){return r[t]}),e)}}if("function"==typeof t[t.length-1]){var o=t.pop();return C(t=1===t.length&&l(t[0])?t[0]:t,null).pipe(k(function(t){return o.apply(void 0,t)}))}return C(t,null)})(i).subscribe(t=>{const e=t.map(t=>t.items||t.error).flat();let o=0,i=0;const u=new Set;if(e.forEach(t=>{if(!t)return;if(t.errors&&"dailyLimitExceeded"===t.errors[0].reason)return void(document.getElementById("error").textContent="Maximum number of queries for the day has been reached. Try again tomorrow.");if(u.has(t.displayLink))return;let r;if(u.add(t.displayLink),t.pagemap.aggregaterating&&t.pagemap.aggregaterating.length){if(r=G(parseFloat(t.pagemap.aggregaterating[0].ratingvalue),parseFloat(t.pagemap.aggregaterating[0].bestrating||5)),isNaN(r))return;o++,i+=r}else{if(!t.pagemap.rating)return;{const n=t.pagemap.rating.map(t=>{const n=G(parseFloat(t.ratingvalue),parseFloat(t.bestrating));if(!isNaN(n))return n});if(r=n.reduce((t,n)=>t+n,0)/n.length,isNaN(r))return;o++,i+=r}}n.innerHTML+=U({title:t.title,url:t.link,description:t.snippet,rating:(5*r).toFixed(1),color:Z(5*r)})}),o>0){const t=5*i/o;r.innerHTML=K({score:t.toFixed(1),count:o,color:Z(t)})}})})}else document.getElementById("error").textContent="Search term minimum length is 5"}function Z(t){return t<2?"brown":t<3?"red":t<4?"#f1f100":t<4.5?"limegreen":"seagreen"}function $(t,n=1){return t?H(fetch(`https://www.googleapis.com/customsearch/v1?cx=005042070686331231502:7crlel-6ae8&key=AIzaSyCLu_FyerPoUZZpci5q0Z-cw3IYmD0rGCw&sort=aggregaterating-reviewcount:d:s,&q=allintitle:${t}+review&num=10&start=${n}&lr=lang_en`,{method:"GET",headers:{"Content-Type":"application/json"}})).pipe(function t(n,r,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof r?function(o){return o.pipe(t(function(t,e){return H(n(t,e)).pipe(k(function(n,o){return r(t,n,e,o)}))},e))}:("number"==typeof r&&(e=r),function(t){return t.lift(new q(n,e))})}(t=>H(t.json()))):null}function G(t,n){return t/n}document.getElementById("submit").onclick=W,document.getElementById("searchkey").onkeypress=t=>{13===t.keyCode&&W()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,